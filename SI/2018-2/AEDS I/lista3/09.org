#+TITLE: Exercício 09
#+AUTHOR: Lucas Vieira

* Introdução

Feito com base no tutorial em
[[http://www.sdowney.org/2016/10/c-code-in-org-mode/]].

* Início
Vamos começar.

#+HEADERS: :tangle 09.cpp :exports code :eval never
#+BEGIN_SRC C++
#+END_SRC

#+HEADERS: :tangle 09.cpp :exports code :eval never
#+BEGIN_SRC C++
#include <cstdio>

int
main(void)
{
#+END_SRC


Temos duas equações:

- $ax + by = c$
- $dx + ey = f$

Começaremos com a forma de representá-las na memória.

#+HEADERS: :tangle 09.cpp :exports code :eval never
#+BEGIN_SRC C++
union linear_system_data {
    struct {
	float a, b, c, d, e, f;
    };
    float values[6];
};
#+END_SRC

Declarando desta forma, podemos nos referir aos valores por índice ou por seus
nomes. Este é um truque que costumo usar para evitar algumas dores de cabeça
posteriores.

Agora, instanciamos uma estrutura e lemos os números.

#+HEADERS: :tangle 09.cpp :exports code :eval never
#+BEGIN_SRC C++
linear_system_data data;

for(size_t i = 0; i < 6; i++)
    scanf("%f", data.values + i);
#+END_SRC

Logo após, tratamos a restrição mais comum: Nenhum dos nossos coeficientes pode
ser nulo.

#+HEADERS: :tangle 09.cpp :exports code :eval never
#+BEGIN_SRC C++
{
    bool null_value = false;
    for(size_t i = 0; i < 6; i++) {
	if(((i + 1) % 3)
	   && data.values[i] == 0.0f) {
	    null_value = true;
	    break;
	}
    }
	
    if(null_value) {
	printf("Impossivel resolver o sistema\n");
	return 1;
    }
}
#+END_SRC

* Resolvendo o sistema

Eis o problema: eu tentei, e o método da substituição não ajuda muito aqui. Na
realidade, o método da substituição só ajudaria se eu tivesse um sistema de
resolução de problemas simbólicos à mão, e isto eu só faria utilizando Lisp, ou
Maxima, ou uma ferramenta proprietária como Mathematica. Ao invés disso, vamos
manter as coisas simples e utilizar o método da soma.

Vamos começar achando o valor para o qual $(d * valor) \eq a$. Nossa restrição é
que $d \neq 0$.

#+HEADERS: :tangle 09.cpp :exports code :eval never
#+BEGIN_SRC C++
float factor = data.a / data.d;
#+END_SRC

Vamos, agora, multiplicar todos os coeficientes da segunda equação pelo oposto
do fator encontrado. Assim, teremos como somar estas equações e desaparecer com
o $x$, pois $a$ e $d$ são fatores desta variável.

#+HEADERS: :tangle 09.cpp :exports code :eval never
#+BEGIN_SRC C++
for(size_t i = 3; i < 6; i++)
    data.values[i] *= -1.0 * factor;
#+END_SRC

Com esta operação, podemos agora calcular $y$ a partir de:

#+BEGIN_SRC txt
             by       = c
+ (e * factor)y       = f
--------------------------------
  ((e * factor) + b)y = c + f  =>  y = (c + f) / ((e * factor) + b)
#+END_SRC

Restrição: $((e * factor) + b) \neq 0$

#+HEADERS: :tangle 09.cpp :exports code :eval never
#+BEGIN_SRC C++
if(data.e + data.b == 0.0) {
    printf("Impossivel resolver o sistema\n");
    return 1;
}
float y = (data.c + data.f) / (data.e + data.b);
#+END_SRC

 Podemos, agora, calcular o valor de x com base na primeira equação.
 $ax + by = c \implies ax = c - by \implies x = (c - by) / a$.

 Restrição (já tratada): $a \neq 0$.

#+HEADERS: :tangle 09.cpp :exports code :eval never
#+BEGIN_SRC C++
float x = (data.c - (data.b * y)) / data.a;
#+END_SRC


* Finalizando

Agora, imprimimos a solução e finalizamos o programa.

#+HEADERS: :tangle 09.cpp :exports code :eval never
#+BEGIN_SRC C++
printf("Solução:\n"
       "x = %f\n"
       "y = %f\n",
       x, y);
    
return 0;
}
#+END_SRC


* Conclusão

Para gerar o arquivo =cpp=, execute isto no seu Emacs:

#+NAME: tangle-buffer
#+HEADERS: :exports both :results value
#+BEGIN_SRC emacs-lisp
(org-babel-tangle)
#+END_SRC

