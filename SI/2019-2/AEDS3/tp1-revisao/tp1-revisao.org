#+TITLE:    Lista de Exercícios de Revisão: Respostas
#+AUTHOR:   Lucas Samuel Vieira
#+EMAIL:    lucasvieira@protonmail.com
#+PROPERTY: header-args:C++ :main no :eval no
#+STARTUP:  showall

:ABNTEX2:
#+OPTIONS: toc:nil title:nil
#+LANGUAGE: pt_BR
#+BIND: org-latex-hyperref-template "\\definecolor{blue}{RGB}{41,5,195}\n\\makeatletter\n\\hypersetup{\n    pdftitle={%t},\n    pdfauthor={%a},\n    pdfkeywords={%k},\n    pdfsubject={%d},\n    pdfcreator={%c},\n    colorlinks=true,\n    linkcolor=black,\n    citecolor=black,\n    filecolor=black,\n    urlcolor=black,\n    bookmarksdepth=4\n}\n\\makeatother"

#+LATEX_CLASS: abntex2
#+LATEX_CLASS_OPTIONS: [article,12pt,openany,oneside,a4paper,chapter=TITLE,hyphen,english,brazil,chapter=TITLE,sumario=tradicional]

#+LATEX_HEADER: \usepackage{times}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{microtype}
#+LATEX_HEADER: \usepackage{titlesec}
#+LATEX_HEADER: \usepackage[brazilian, hyperpageref]{backref}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage[alf,abnt-emphasize=bf,abnt-doi=link]{abntex2cite}
# #+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEx_HEADER: \usepackage{multicol}

#+LATEX_HEADER: \titleformat{\section}{\normalfont\normalsize\bfseries\uppercase}{}{0pt}{}
#+LATEX_HEADER: \titleformat{\subsection}{\normalfont\normalsize\bfseries}{}{0pt}{\space}
#+LATEX_HEADER: \titleformat{\subsubsection}{\normalfont\normalsize\bfseries}{}{0pt}{\space}
#+LATEX_HEADER: \titleformat{\paragraph}{\normalfont\normalsize\itshape}{}{0pt}{\theparagraph\space}

# Espaçamento
#+LATEX_HEADER: \setlength{\parindent}{1.5cm}
#+LATEX_HEADER: \setlrmarginsandblock{3cm}{2cm}{*}
#+LATEX_HEADER: \setulmarginsandblock{2.5cm}{2.5cm}{*}
#+LATEX_HEADER: \checkandfixthelayout

#+LATEX_HEADER: \makeindex
:END:

# :FONTES:
# #+LATEX_HEADER: \usepackage{ifxetex}
# #+LATEX_HEADER: \ifxetex
# #+LATEX_HEADER: \usepackage{mathspec}
# #+LATEX_HEADER: \setmonofont[Scale=1.0]{APL385 Unicode}
# #+LATEX_HEADER: \fi
# :END:

:METADADOS:
# #+LATEX_HEADER: \titulo{Exportando Org Mode para \LaTeX}
# #+LATEX_HEADER: \author{Lucas Vieira}
#+LATEX_HEADER: \preambulo{Trabalho Prático de Revisão de AEDS3.\par{}Professora: Ana Carolina Rodrigues}
#+LATEX_HEADER: \local{Diamantina}
#+LATEX_HEADER: \instituicao{Universidade Federal dos Vales do Jequitinhonha e do Mucuri}
#+LATEX_HEADER: \tipotrabalho{Artigo}
# #+LATEX_HEADER: \orientador{Fulano}
# #+LATEX_HEADER: \coorientador{Ciclano}
:END:

:PRETEXTUAL:
# Espaçamento de 1.5 entre linhas
#+LATEX: \OnehalfSpacing

# Sinaliza início dos elementos pré-textuais
#+LATEX: \pretextual

# Capa do trabalho
#+LATEX: \imprimircapa

# Folha de rosto
#+LATEX: \imprimirfolhaderosto
#+LATEX: \newpage
#+LATEX: \textual
:END:

* Exercício 1

Um determinado material radioativo perde metade de sua massa a cada 50
segundos. Dada a massa inicial, em gramas, fazer um algoritmo que
determine o tempo necessário para que essa massa se torne menor do que
0,5 grama. Escreva a massa inicial, a massa final e o tempo calculado
em horas, minutos e segundos.

** Resposta

#+begin_src C++ :tangle ex01.cpp
#include <cstdio>
#include <cmath>

int
calc_decay_time(float& mass)
{
    int time = 0;
    while(mass >= 0.5f) {
        mass /= 2.0f;
        time += 50;
    }
    return time;
}

int
main(void)
{
    float init_mass;
    printf("Insira a massa inicial: ");
    scanf("%f", &init_mass);

    // Copiamos a massa inicial para uma variável
    // que será passada por referência
    float final_mass = init_mass;

    int decay_time       = calc_decay_time(final_mass);

    int decay_time_hours = (int)truncf(decay_time / 3600);
    decay_time -= decay_time_hours * 3600;
    int decay_time_mins  = (int)truncf(decay_time / 60);
    decay_time -= decay_time_mins * 60;

    // Strings multilinha são concatenadas
    // automaticamente na compilação
    printf("Massa inicial:       %gg\n"
           "Massa final:         %gg\n"
           "Tempo de decaimento: %dh%dm%ds\n",
           init_mass, final_mass,
           decay_time_hours,
           decay_time_mins,
           decay_time);
    return 0;
}
#+end_src

* Exercício 2

Escreva um procedimento que receba um número inteiro e imprima o mês
correspondente ao número. Por exemplo, =2= corresponde a ="fevereiro"=. O
procedimento deve mostrar uma mensagem de erro caso o número recebido
não faça sentido.

** Resposta

#+begin_src C++ :tangle ex02.cpp
#include <cstdio>

const char *months[] = {
    "janeiro", "fevereiro", "marco",
    "abril",   "maio",      "junho",
    "julho",   "agosto",    "setembro",
    "outubro", "novembro",  "dezembro"
};

void
print_month(int n)
{
    puts((n < 1 || n > 12)
         ? "Erro: o mes eh invalido"
         : months[n - 1]);
}


int
main(void)
{
    int the_month;
    printf("Informe o numero do mes: ");
    scanf("%d", &the_month);
    print_month(the_month);
    return 0;
}
#+end_src

* Exercício 3

Seja o seguinte trecho de programa, responda a saída de cada expressão
listada abaixo:

#+begin_src C++ :tangle no
int i = 3, j = 5;
int *p, *q;
p = &i;
q = &j;
#+end_src


a) ~p == &i;~\\
Resultado: =0= (=false=).

b) ~*p - *q;~\\
Resultado: =-2=.

c) ~**&p;~\\
Resultado: =3= (equivalente a =*p=).

d) ~3*-*p/(*q)+7~\\
Resultado: =6=

* Exercício 4

Qual será a saída deste programa, supondo que =i= ocupa o endereço =4094=
na memória?

#+begin_src C++
int main() {
    int i = 5, *p;
    p = &i;
    cout << p << '\t' << *p+2 << '\t' << **&p << '\t'
         << 3**p << '\t' << **&p+4 << endl;
}
#+end_src

** Resposta

A saída será:

#+begin_example
0xffe	7	5	15	9
#+end_example

*NOTA:* $4094_{10}$ equivale a $FFE_{16}$. Por padrão, =std::cout= imprime
ponteiros em notação hexadecimal.

* Exercício 5

Escreva uma função recursiva, =potencia(x, y)=, que devolva =x= elevado à
potência =y=.

** Resposta

#+begin_src C++ :tangle ex05.cpp
#include <cstdio>

long int
potencia(long int x, long int y)
{
    if(y == 0) return 1;
    if(y == 1) return x;
    return x * potencia(x, y - 1);
}

int
main(void)
{
    // Testes
    long int a, b;
    scanf("%ld %ld", &a, &b);
    
    if(b < 0) return 1;
    
    printf("%ld\n", potencia(a, b));
    return 0;
}
#+end_src

* Exercício 6

Escreva um programa que abra um arquivo-texto e conte o número de
caracteres presentes nele. Imprima o número de caracteres na tela.

** Resposta

#+begin_src C++ :tangle ex06.cpp
#include <cstdio>
#include <fstream>

int
main(int argc, char **argv)
{
    // O nome do arquivo sera recebido
    // via argumentos no console
    if(argc < 2) return 1;

    const char *filename = argv[1];

    std::ifstream file;
    file.open(filename);

    if(!file.is_open())
        return 1; // Erro ao abrir o arquivo

    long char_count = 0;
    while(file.good()) {
        char c = file.get();
        if(c != EOF) char_count++;
    }

    file.close();

    printf("%ld\n", char_count);
    return 0;
}
#+end_src

* Exercício 7

O que faz o seguinte programa quando executado?

** Letra A

#+begin_src C++
#include <iostream>
using namespace std;
int main() {
    int vet[] = {4, 9, 12};
    int i, *ptr;
    ptr = vet;
    for(i = 0; i < 3; i++) {
        cout << *ptr++ << endl;
    }
    return 0;
}
#+end_src

*** Resposta

O programa em questão imprime os valores =4=, =9= e =12= na tela, em
sequência, através do uso de um ponteiro como iterador, sendo este
ponteiro incrementado a cada acesso ao número inteiro referenciado.

** Letra B

#+begin_src C++
#include <iostream>
using namespace std;

int main() {
    int vet[] = {4, 9, 12};
    int i, *ptr;
    ptr = vet;
    for(i = 0; i < 3; i++) {
        cout << (*ptr)++ << endl;
    }
    return 0;
}
#+end_src

*** Resposta

O programa imprime os valores =4=, =5= e =6=. O uso dos parênteses faz com
que o valor referenciado por =ptr= seja incrementado pelo operador de
incremento (=++=).

Sendo assim, =ptr= não percorre o vetor, ficando no primeiro elemento;
ademais, o primeiro elemento do vetor, que é referenciado por =ptr=,
será incrementado a cada iteração do laço de repetição.

* Exercício 8

Fazer um programa que receba do usuário a quantidade =N= de números a
ser digitada. Em seguida, o programa deve alocar dinamicamente um
vetor de =N= inteiros, receber =N= números do usuário e armazenar no
vetor, e mostrar o maior valor do vetor, o menor valor do vetor e a
média dos valores.

** Resposta

#+begin_src C++ :tangle ex08.cpp
#include <cstdio>
#include <cstdlib>

int
greatest(int *vec, size_t n)
{
    if(!vec) return 0;
    int res = vec[0];
    for(size_t i = 1; i < n; i++)
        if(vec[i] > res)
            res = vec[i];
    return res;
}

int
smallest(int *vec, size_t n)
{
    if(!vec) return 0;
    int res = vec[0];
    for(size_t i = 1; i < n; i++)
        if(vec[i] < res)
            res = vec[i];
    return res;
}

float
average(int *vec, size_t n)
{
    if(!vec) return 0;
    float sum = 0.0f;
    for(size_t i = 0; i < n; i++)
        sum += vec[i];
    return sum / ((float)n);
}

int
main(void)
{
    int buffer;
    
    printf("Insira a quantidade de numeros: ");
    scanf("%d", &buffer);

    if(buffer <= 0) {
        puts("Quantidade invalida");
        return 1;
    }

    size_t vec_size = (size_t)buffer;
    int *vec        = (int*)malloc(vec_size * sizeof *vec);
    
    printf("Insira %lu numeros:\n", vec_size);
    for(size_t i = 0; i < vec_size; i++)
        scanf("%d", vec + i);

    printf("Maior valor: %d\n"
           "Menor valor: %d\n"
           "Media:       %g\n",
           greatest(vec, vec_size),
           smallest(vec, vec_size),
           average(vec, vec_size));

    free(vec);
    
    return 0;
}
#+end_src
