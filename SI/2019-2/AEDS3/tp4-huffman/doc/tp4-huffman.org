#+TITLE:       Algoritmo de Compressão de Huffman
#+AUTHOR:      Lucas S. Vieira
#+EMAIL:       lucasvieira@protonmail.com
#+DESCRIPTION: Implementação do método de compressão de Huffman em C++.
#+KEYWORDS:    huffman, cpp, documentação, algoritmos, estruturas de dados
#+LANGUAGE:    pt_BR
#+PROPERTY:    header-args:cpp :eval no :main no :tangle huffman.cpp
#+PROPERTY:    header-args:dot :cache yes :cmdline -Kdot -Tpng
#+STARTUP:     content


:ABNTEX2:
#+OPTIONS: toc:nil title:nil
#+LANGUAGE: pt_BR
#+BIND: org-latex-hyperref-template "\\definecolor{blue}{RGB}{41,5,195}\n\\makeatletter\n\\hypersetup{\n    pdftitle={%t},\n    pdfauthor={%a},\n    pdfkeywords={%k},\n    pdfsubject={%d},\n    pdfcreator={%c},\n    colorlinks=true,\n    linkcolor=black,\n    citecolor=black,\n    filecolor=black,\n    urlcolor=black,\n    bookmarksdepth=4\n}\n\\makeatother"

#+LATEX_CLASS: abntex2
#+LATEX_CLASS_OPTIONS: [article,12pt,openany,oneside,a4paper,chapter=TITLE,hyphen,english,brazil,chapter=TITLE,sumario=tradicional]

#+LATEX_HEADER: \usepackage{times}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{microtype}
#+LATEX_HEADER: \usepackage{titlesec}
#+LATEX_HEADER: \usepackage[brazilian, hyperpageref]{backref}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage[alf,abnt-emphasize=bf,abnt-doi=link]{abntex2cite}
# #+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{indentfirst}

# Seções e subseções em Times
#+LATEX_HEADER: \titleformat{\chapter}{\normalfont\large\bfseries\uppercase}{}{0pt}{\space}
#+LATEX_HEADER: \titleformat{\section}{\normalfont\normalsize\bfseries\uppercase}{}{0pt}{\thesection\space}
#+LATEX_HEADER: \titleformat{\subsection}{\normalfont\normalsize\bfseries}{}{0pt}{\thesubsection\space}
#+LATEX_HEADER: \titleformat{\subsubsection}{\normalfont\normalsize\bfseries}{}{0pt}{\thesubsubsection\space}
#+LATEX_HEADER: \titleformat{\paragraph}{\normalfont\normalsize\itshape}{}{0pt}{\theparagraph\space}

# Espaçamento
#+LATEX_HEADER: \setlength{\parindent}{1.5cm}
#+LATEX_HEADER: \setlrmarginsandblock{3cm}{2cm}{*}
#+LATEX_HEADER: \setulmarginsandblock{2.5cm}{2.5cm}{*}
#+LATEX_HEADER: \checkandfixthelayout

#+LATEX_HEADER: \makeindex
:END:

:FONTES:
#+LATEX_HEADER: \usepackage{ifxetex}
#+LATEX_HEADER: \ifxetex
#+LATEX_HEADER: \usepackage{mathspec}
#+LATEX_HEADER: \setmonofont[Scale=0.8]{APL385 Unicode}
#+LATEX_HEADER: \fi

# Tamanhos e fontes de seções
#+LATEX_HEADER: \renewcommand{\ABNTEXchapterfontsize}{\normalsize} 
#+LATEX_HEADER: \renewcommand{\ABNTEXsectionfontsize}{\normalsize}
#+LATEX_HEADER: \renewcommand{\ABNTEXsubsectionfontsize}{\normalsize}
#+LATEX_HEADER: \renewcommand{\ABNTEXsubsubsectionfontsize}{\normalsize}

# Fontes das seções e subseções em negrito
#+LATEX_HEADER: \renewcommand{\ABNTEXchapterfont}{\normalfont\bfseries} 
#+LATEX_HEADER: \renewcommand{\ABNTEXsectionfont}{\normalfont\bfseries}
#+LATEX_HEADER: \renewcommand{\ABNTEXsubsectionfont}{\normalfont}
#+LATEX_HEADER: \renewcommand{\ABNTEXsubsubsectionfont}{\normalfont}

# Código
# Número de linhas
#+LATEX_HEADER: \setminted{linenos=true}

# Quebra de linhas
#+LATEX_HEADER: \setminted{breaklines=true}

# Tabs
#+LATEX_HEADER: \setminted{obeytabs}
:END:

:METADADOS:
# #+LATEX_HEADER: \titulo{Exportando Org Mode para \LaTeX}
# #+LATEX_HEADER: \author{Lucas Vieira}
#+LATEX_HEADER: \preambulo{Trabalho Final da disciplina de Algoritmos e Estruturas de Dados III, envolvendo o Algoritmo de Compressão de Huffman.\par{}Docente: Ana Carolina Rodrigues}
#+LATEX_HEADER: \local{Diamantina}
#+LATEX_HEADER: \instituicao{Universidade Federal dos Vales do Jequitinhonha e do Mucuri}
#+LATEX_HEADER: \tipotrabalho{Artigo}
# #+LATEX_HEADER: \orientador{Fulano}
# #+LATEX_HEADER: \coorientador{Ciclano}
:END:

:PRETEXTUAL:
# Espaçamento de 1.5 entre linhas
#+LATEX: \OnehalfSpacing

# Sinaliza início dos elementos pré-textuais
#+LATEX: \pretextual

# Capa do trabalho
#+LATEX: \imprimircapa

# Folha de rosto
#+LATEX: \imprimirfolhaderosto
#+LATEX: \newpage

# Índice
#+TOC: headlines:1
#+LATEX: \newpage
#+LATEX: \textual
:END:

* Introdução

O objetivo deste trabalho é apresentar um estudo e uma implementação
efetiva do algoritmo de compressão de Huffman. Demonstramos,
primeiramente, a natureza do algoritmo e como o mesmo pode ser
utilizado para comprimir um arquivo, através de representar cada um de
seus caracteres com um certo número de bits. Em seguida, demonstramos
brevemente alguns detalhes da implementação deste algoritmo em C++
moderno. Finalmente, enumeramos algumas utilidades da aplicação
criada, através da mostra das entradas e saídas para os processos de
compressão e descompressão de um arquivo-texto.

* Algoritmo de Huffman

O algoritmo de Huffman é uma técnica de compressão para textos em
linguagem natural, sendo uma forma de categorização e transformação
bit-a-bit para qualquer unidade mínima determinada a ser comprimida.

# Falar da história do algoritmo

Neste trabalho, o método de compressão de Huffman foi utilizado para
arquivos-texto comuns, tomando como unidade mínima um caractere. Este
método envolve a criação de uma árvore /trie/, ou seja, uma árvore
binária especial, onde cada /aresta/ possui um certo rótulo, e o caminho
formado pela raiz até a folha descreve uma /string/, formada pela junção
dos rótulos das arestas percorridas, na ordem em que foram
percorridas.

Na árvore /trie/ do algoritmo de Huffman, os rótulos das arestas são
valores binários (=0= ou =1=), e um caminho da raiz até alguma folha desta
árvore descreve um conjunto de caracteres binários, que corresponde
aos /bits/ utilizados para comprimir o caractere informado no nó-folha
deste mesmo caminho.

Utilizando essa árvore, podemos tanto codificar quanto descodificar
arquivos de texto através dos valores de bits lidos. A codificação
envolve escrever os bits equivalentes ao caractere em questão no
arquivo; já a decodificação acumula bits lidos do arquivo, até que uma
correspondência para com os mesmos seja encontrada, e então o
caractere associado é deduzido.

** Cálculo de frequência de caracteres

O primeiro passo para a criação da árvore /trie/ é calcular a frequência
com a qual cada caractere aparece no arquivo-texto em questão. Para
tanto, percorremos este arquivo, caractere por caractere, e
acumulamos a frequência para cada caractere em um /mapa de frequências/.

Este mapa de frequências nada mais é que uma associação /chave/ $\times$
/valor/, onde o caractere contado é a /chave/, e a frequência de aparição
deste caractere no arquivo é o /valor/. O Listing [[huffman_freqmap_pseudo]]
apresenta o pseudocódigo para este algoritmo.

#+NAME: huffman_freqmap_pseudo
#+CAPTION: Algoritmo para cálculo de número de caracteres. Fonte: Autor (2020).
#+begin_src text :tangle no
função Mapa-De-Frequencias(Arquivo)
    crie um mapa de frequências M
    para cada caractere C em Arquivo
    |   Incrementa-Frequencia(M, C)
    fim do laço
    retorne M
fim da função
#+end_src

** Construção da árvore

Seja =C= o conjunto de nós-folha desconexos, cada qual contendo
informações a respeito da frequência de um certo caractere do alfabeto
do arquivo tratado. citeonline:cormen demonstra um possível algoritmo
para criação de uma árvore binária de frequências dos caracteres, como
exposto no Listing [[huffman_treebuild_pseudo]].

#+NAME: huffman_treebuild_pseudo
#+CAPTION: Algoritmo de Huffman. Fonte: citeonline:cormen (adaptado).
#+begin_src text :tangle no
função Huffman(C)
    n = Tamanho(C)
    Q = C
    para i = 1 até n - 1
    |   x = Extrair-Mínimo(Q)
    |   y = Extrair-Mínimo(Q)
    |   crie um novo nó z
    |   z.esquerda = x
    |   z.direita  = y
    |   z.freq     = x.freq + y.freq
    |   Inserir(Q, z)
    fim do laço
    retorne Extrair-Mínimo(Q)
fim da função
#+end_src

Neste algoritmo, =n= é a cardinalidade de =C=, e =Q= é uma cópia do conjunto
=C= a ser utilizada. O algoritmo institui a criação da árvore binária
através da junção dos dois nós de menor frequência em =Q= sob um novo
nó-pai que não armazena valores, mas armazena a soma das frequências
de seus filhos. O nó-pai criado é então inserido em =Q=, mas não são
inseridos novamente os nós de menor frequência que foram
extraidos. Estes tornam-se acessíveis apenas através do nó-pai. Esse
processo é repetido por um número =n - 1= de vezes.

O objetivo da criação desta árvore é determinar uma codificação, em
/bits/, para cada um dos caracteres que aparecem no arquivo-texto. Para
determinar este código, basta percorrer a árvore a partir da raiz até
o nó do caractere em questão. Cada vez que o caminho for para a
/esquerda/, agregue um bit =0= à codificação; caso vá para a /direita/,
agregue um bit =1= à codificação.

#+NAME: fig:teste1_hufftree
#+CAPTION: Exemplo de árvore de Huffman gerada para o texto =abba is bad.=
#+ATTR_LATEX: :width \linewidth
[[file:../img/teste1_hufftree.png]]

Vejamos o exemplo da árvore na Figura [[fig:teste1_hufftree]]. A
representação do caractere de Espaço (=0x20=) envolve a seguinte
trajetória a partir da raiz: /direita/, /esquerda/, /esquerda/. Portanto,
serão necessários três bits para este caractere:
=100=. Comparativamente, o caractere =i= necessitará de quatro bits, sendo
eles =1110=.

** Geração do mapa de bits

Por fim, após a criação da árvore que mapeia cada caractere a uma
sequência de bits, basta identificarmos esta sequência e realizarmos
um mapeamento entre os caracteres e as mesmas.

O objetivo deste algoritmo é criar um mapeamento /chave/ $\times$ /valor/,
onde a /chave/ é, novamente, um caractere em específico, mas o /valor/
associado a cada caractere é um /vetor de bits/ que será utilizado para
a representação daquele caractere no arquivo binário comprimido.

O algoritmo do Listing [[huffman_bitmap_pseudo]] utiliza uma abordagem
/top-down/ para conceber tal mapeamento: tomamos o conjunto =F= de todos
os nós-folha da árvore e, para cada um destes nós-folha, acumulamos os
bits quando percorremos /retroativamente/ as arestas (do nó-folha ao
nó-raiz). Finalmente, como este acúmulo é feito de forma retroativa,
invertemos a sequência dos bits acumulados para obtermos a /string/ de
bits apropriada.

#+NAME: huffman_bitmap_pseudo
#+CAPTION: Algoritmo para criação do mapa de bits por caractere. Fonte: Autor (2020).
#+begin_src text :tangle no
função Cria-Mapa-de-Bits(A)
    crie um mapa de bits M
    F = Encontrar-Folhas(A)
    R = Raiz(A)
    para cada Folha em F
    |   Ponteiro = Folha
    |   C = Folha.caractere
    |   enquanto Ponteiro não é R
    |   |   se Filho-Esquerdo(Ponteiro)
    |   |   |   Anexa-Ao-Fim(M[C], 0)
    |   |   senão
    |   |   |   Anexa-Ao-Fim(M[C], 1)
    |   |   fim da comparação
    |   |   Ponteiro = Ponteiro.pai
    |   fim do laço
    |   Inverter(M[C])
    fim do laço
    retorne M
fim da função
#+end_src

*** Mapa inverso de bits na descompressão

É interessante notar que, para o caso da /descompressão/, este
mapeamento é recuperado como parte do cabeçalho do arquivo
comprimido. Porém, o trabalho a ser realizado é também o inverso:
possuímos uma associação /chave/ $\times$ /valor/, onde a /chave/ é a /string/
de bits, e o /valor/ associado é o caractere.

Recuperar o caractere associado a um valor é uma tarefa que pode ser
realizada através da reconstrução da árvore de Huffman. Todavia,
optamos pela correspondência em termos de mapeamento, que torna a
implementação do processo de /descompressão/ mais simples.

* Implementação

O programa que implementa os algoritmos previamente apresentados foi
escrito utilizando a linguagem C++, em sua especificação de 2014, que
tornou-se estável e padrão em todos os compiladores mais
conhecidos[fn:7]. Ademais, o programa foi codificado através de uma
metodologia originalmente proposta por citeonline:knuth1984, conhecida
como /programação literária/[fn:1]. Nesta metodologia,

#+begin_citacao
``Ao invés de imaginarmos que nossa tarefa principal é instruir
um computador quanto ao que deve ser feito, vamos nos concentrar em
explicar para humanos o que nós queremos que o computador
faça.''[fn:2] cite:knuth1984
#+end_citacao

A /programação literária/ envolve a escrita de um documento, onde ficam
misturados prosa explicativa e fragmentos de código. Pode-se, então,
gerar um documento apropriado como meio de documentação, tal que este
possua os fragmentos de código associados, e também pode-se produzir
arquivos de código que possuem apenas os fragmentos deste
documento. Esta abordagem teve um papel crucial para a compreensão e a
organização das ideias no código.

citeonline:knaggs1995 ressalta que esta metodologia possui três
características que distinguem-na do mero uso de comentários extensos
em arquivos de código, sendo elas:

1. Flexibilidade na ordem de elaboração;
2. Suporte automático a navegação no código;
3. Produção de documentação formatada.

A seguir, apresentaremos apenas fragmentos e explicações relevantes
para as partes mais cruciais do código, que envolvem diretamente o
algoritmo de Huffman. A documentação passo-a-passo do programa pode
ser acompanhada através do documento associado ou do código da
aplicação em si, ambos produzidos através da metodologia previamente
descrita.

** Tipos declarados envolvidos

Antes de abordarmos a implementação dos algoritmos, é essencial
definir alguns tipos pertinentes.

Os tipos a seguir são especializações de /contêineres/ presentes na
linguagem C++14, com exceção dos nós da árvore de Huffman, que foram
programados manualmente. Estas especializações foram criadas com o
único intuito de garantir que o código torne-se mais sucinto, sem
que os contêineres perdessem sua semântica.

*** Mapa de frequências (=freq_map_t=)

Um /mapa de frequências/ mapeia um certo caractere para a frequência de
sua aparição no arquivo-texto. As frequências são salvas como um
inteiro sem sinal, de exatamente 64 bits, para possibilitar um maior
capacidade à contagem de frequência.

#+NAME: freqmap
#+CAPTION: Definição do tipo de um mapa de frequências de caracteres.
#+begin_src cpp
typedef std::map<char, uint64_t> freq_map_t;
#+end_src

*** Nó da árvore de Huffman (=huffman_node_t=)

A estrutura =huffman_node_t= define um nó qualquer na árvore binária do
algoritmo de Huffman. Este nó possui um caractere associado, uma
frequência para a ocorrência de tal caractere no texto, ponteiros para
filhos à /esquerda/ e à /direita/ e, finalmente, um ponteiro para o nó que
seja /pai/ do nó atual.

Este último ponteiro para o /pai/ foi fruto de uma decisão durante a
implementação, possibilitando que a árvore pudesse ser percorrida
desde os nós-folha (onde os caracteres ficam armazenados) até a raiz,
com o intuito de recolher os bits utilizados para aquele
caractere. Porém, esta decisão não interferiu na didática do código.

A frequência de um caractere é armazenada como um inteiro sem sinal de
64 bits, em conformidade com a implementação do mapa de frequências.

#+NAME: huffman_node
#+CAPTION: Definição da estrutura de um nó da árvore de Huffman.
#+begin_src cpp
struct huffman_node_t
{
    char           c;
    uint64_t       freq;
    huffman_node_t *left;
    huffman_node_t *right;
    huffman_node_t *parent;
};
#+end_src

*** Conjunto de nós da árvore (=node_set_t=)

Este tipo determina a estrutura de dados para um /conjunto/ de nós de
uma árvore de Huffman que já estejam alocados apropriadamente na
memória. Por tratar-se de um /conjunto/, recuperamos sua semântica
na matemática, onde conjuntos são representados, por convenção, como
tendo elementos /ordenados/.

Para garantir que este /conjunto/ de nós seja um contêiner /sempre
ordenado/, temos uma função associada a este contêiner, que serve como
método de comparação entre os elementos. Esta função é declarada como
uma /função lambda/[fn:4], o que pode ser verificado no Listing
[[huff_cmp]]. Veja que aqui utilizamos a palavra-chave =auto=, que instrui o
compilador a deduzir o tipo de declaração[fn:3] da variável que
armazena a /função lambda/, isentando o programador da escrita de um
tipo extenso e potencialmente danoso à compreensão do código.

#+NAME: huff_cmp
#+CAPTION: Função utilizada para comparação de elementos em um conjunto de nós da árvore.
#+begin_src cpp
auto huff_cmp =
    [](huffman_node_t *a, huffman_node_t *b) -> bool {
        return (a->freq < b->freq);
    };
#+end_src

A definição do conjunto em si baseia-se na definição de um /conjunto/ em
C++, com a ressalva de que este /conjunto/, na verdade, *poderá possuir
elementos repetidos*. Esta decisão não afeta em nada no código, e foi
tomada especificamente devido à natureza da função de comparação já
apresentada: sem esta alteração, nós de mesma frequência seriam
removidos.

Adicionalmente, como pode ser observado no Listing [[nodeset]], utilizamos
o operador =decltype=, que nos isentará de escrever manualmente o tipo
da função de ordenação já discutida.

#+NAME: nodeset
#+CAPTION: Definição do tipo de um conjunto de nós da árvore.
#+begin_src cpp
typedef
    std::multiset<huffman_node_t*, decltype(huff_cmp)>
    node_set_t;
#+end_src

*** Mapa de bits (=bit_map_t=)

O /mapa de bits/ é uma estrutura que associa um caractere a um certo
/vetor/[fn:5] de valores booleanos e tamanho variável. Esta estrutura
será utilizada para armazenar os bits de um certo caractere, no
momento da criação do arquivo comprimido.

Mapas de bits são o resultado obtido após a dedução das /strings/ de
bits que serão associadas a cada caractere, através do percorrimento
de uma árvore /trie/ de Huffman.

#+NAME: bitmap
#+CAPTION: Definição do tipo de um mapa de bits.
#+begin_src cpp
typedef std::map<char, std::vector<bool>> bit_map_t;
#+end_src

*** Mapa de caracteres (=char_map_t=)

O /mapa de caracteres/ é uma estrutura similar ao /mapa de bits/, porém
invertida: temos associações entre /strings/ de bits como chaves para
/caracteres/. Esta estrutura é utilizada ao traduzir um arquivo
comprimido para texto novamente.

#+NAME: charmap
#+CAPTION: Definição do tipo de um mapa de caracteres.
#+begin_src cpp
typedef std::map<std::vector<bool>, char> char_map_t;
#+end_src

** Cálculo de frequências de caracteres

A função demonstrada a seguir realiza a contagem da frequência de cada
caractere para um certo /stream[fn:6]/ de entrada. Este algoritmo
realiza o mesmo trabalho descrito no pseudocódigo da Listagem
[[huffman_freqmap_pseudo]], à exceção de uma função auxiliar.

#+begin_src cpp
freq_map_t
build_frequency_map(std::istream &is)
{
    freq_map_t freq;
    count_characters(is, freq);
    return freq;
}
#+end_src

A função auxiliar a seguir complementa a função anterior, lendo cada
um dos caracteres do /stream/ de entrada até seu final, e escrevendo-os
no /mapa de frequências/ que foi passado por referência.

#+begin_src cpp
void
count_characters(std::istream &stream, freq_map_t &freq)
{
    while(stream.good()) {
        char c = stream.get();
        freq[c]++;
    }
}
#+end_src

** Criação da árvore de Huffman

O código para a criação da árvore de Huffman é extremamente similar ao
pseudocódigo demonstrado no Listing [[huffman_treebuild_pseudo]]
cite:cormen, sendo uma reprodução praticamente fiel, assim construída
de forma proposital.

Para cada número no intervalo $[1, n - 1]$, dada a cópia do conjunto
de nós =Q= (inicialmente populada apenas com nós-folha), /extraímos/ os
dois respectivos nós de menor frequência deste conjunto (=x= e =y=,
respectivamente), e então criamos um novo nó que carrega a soma da
frequência de ambos os nós extraídos. Os filhos /esquerdo/ e /direito/
deste novo nó serão =x= e =y=, nesta ordem.

Ao final da execução do laço sobre o intervalo informado, espera-se
que o conjunto =Q= de nós seja populado com um único nó, que será
extraido ao final; este último nó será a raiz da árvore
criada. citeonline:cormen demonstra uma prova de corretude para o
comportamento deste algoritmo.

#+begin_src cpp
huffman_node_t*
huffman(const node_set_t &C)
{
    size_t     n = C.size();
    node_set_t Q(C);
    
    for(auto i = 1u; i <= n - 1u; i++) {
        huffman_node_t *x, *y;
        x = extract_minimum(Q);
        y = extract_minimum(Q);

        // Crie um novo nó 'z'
        huffman_node_t *z = new huffman_node_t;
        z->c = '\0'; // Sem caractere associado
        z->parent = nullptr;

        z->left  = x;
        z->right = y;
        x->parent = y->parent = z;
        z->freq = x->freq + y->freq;
        
        Q.insert(z);
    }
    return extract_minimum(Q);
}
#+end_src

A função auxiliar =extract_minimum= acaba possuindo uma implementação
trivial pela natureza do tipo =node_set_t=, que é sempre ordenado em
ordem crescente de frequências dos nós. Por isso, implementar
=extract_minimum= nada mais é que remover o /primeiro/ elemento do
conjunto de nós e retorná-lo.

** Mapa de bits por caractere

Para criarmos o /mapa de bits/ para cada caractere, tomamos o algoritmo
descrito no Listing [[huffman_bitmap_pseudo]] e implementamos este
algoritmo.

Tomando o ponteiro para o nó raiz da árvore, passado via parâmetro,
geramos um novo conjunto de nós, contendo apenas /nós-folha/, ou seja,
nós da árvore que possuem algum caractere associado a eles, não sendo
nós intermediários que possuem apenas uma frequência associada.

Após a geração deste conjunto, criamos um mapa do tipo =bit_map_t=, que
estabelece uma relação entre caracteres (=char=) e um conjunto de bits
(/vetor dinâmico/ redimensionável de valores booleanos).

Para cada nó-folha no conjunto gerado, acumulamos os bits percorrendo
a árvore retroativamente, do nó-folha até a raiz, e então /invertemos/
esta acumulação de valores, para que estejam na ordem
correta. Finalmente, salvamos este /vetor/ de bits no mapa, associando-o
ao caractere em questão.

#+begin_src cpp
bit_map_t
make_bit_map(huffman_node_t *root)
{
    bit_map_t bitmap;

    if(!root) return bitmap;

    node_set_t leaves = find_leaves(root);

    // Percorra todas as folhas, criando uma entrada no
    // charmap para cada uma delas
    for(auto leaf : leaves) {
        auto ptr = leaf;
        auto c   = leaf->c;
        while(ptr->parent) {
            // Insira o bit apropriado no final do vetor
            if(ptr == ptr->parent->left) {
                bitmap[c].push_back(false);
            } else {
                bitmap[c].push_back(true);
            }
            ptr = ptr->parent;
        }
        // Finalmente, inverta-o
        std::reverse(bitmap[c].begin(), bitmap[c].end());
    }

    return bitmap;
}
#+end_src

** Informações extras

O restante da aplicação construída envolveu a programação de
ferramentas menos relevantes para o Algoritmo de Huffman, mas não
menos importantes para o processo de compressão e descompressão.

**** Visualização da árvore

O programa possui uma ferramenta de renderização da árvore de Huffman,
capaz de gerar uma imagem para a visualização, a partir de um comando
via console. Esta árvore é renderizada a partir da geração de um
código, que pode então ser transformado em uma imagem. A
disponibilidade destas ferramentas estará vinculada à existência dos
programas externos no sistema do usuário, durante a compilação.

**** Leitura e escrita binária

Para facilitar a leitura e a escrita do arquivo comprimido, foram
criadas duas estruturas, programadas utilizando orientação a objetos.

Como a menor unidade que pode ser lida ou escrita em um arquivo é um
/byte/, estas estruturas são responsáveis por armazenarem os bits lidos
e escritos em um /buffer/ com o tamanho de um byte, e também por
gerenciar a quantidade de bits não-lidos ou que podem ser escritos
para o /buffer/ atual.

**** Cabeçalho do arquivo

Para armazenar a relação entre caracteres e bits, o programa possui
uma definição de cabeçalho de arquivo (=huffman_header=), como
demonstrado abaixo. Este cabeçalho possui uma bandeira indicando a
validade do arquivo como um arquivo comprimido, e valores relacionados
à ocupação de bits no arquivo e no mapeamento por caracteres.

# #+NAME: fileheader
# #+CAPTION: Definição de cabeçalho do arquivo comprimido.
#+begin_src cpp
struct huffman_pair
{
    char     letter;
    uint32_t num_bits;
    uint8_t  dangling_bits;
    uint32_t num_bytes;
    uint8_t  *bits;
};

struct huffman_header
{
    char         flag[8] = "HUFFMAN";
    uint64_t     alphabet_size;
    uint8_t      dangling_space;
    huffman_pair *letters;
};
#+end_src

* Execução do programa

#+NAME: setpath
#+begin_src bash :exports none
cd ..
#+end_src

#+RESULTS: setpath

A seguir, demonstraremos a execução do programa criado, no
console. Algumas das saídas de execução do programa foram resumidas
para ocuparem menos espaço.

** Texto de ajuda

A aplicação responde com base em argumentos, passados em sua invocação
via console. Para verificar os argumentos possíveis, basta utilizar o
argumento =--help=, ou executar a aplicação sem nenhum argumento.

#+begin_src bash :noweb strip-export :exports both :results verbatim :cache yes :eval no
<<setpath>>
./huffman --help
#+end_src

Para este comando, obtemos a saída a seguir:

#+RESULTS[9e79c3b20942b5ad117e765ac0c3fa60b646a3e1]:
#+begin_example
Uso:

	huffman [opcoes...] <entrada> [-o <saida>]

Argumentos da linha de comando:

  <entrada>  	Arquivo a ser operado.

  -o <saida> 	Arquivo a ser escrito apos a
             	operacao (opcional).

  -x         	Extrai o arquivo de entrada para a
             	saida informada.

  --dot      	Mostra codigo GraphViz da arvore
             	de Huffman.

  --image    	Mostra a arvore de Huffman no feh.

  --xdot     	Mostra arvore de Huffman no xdot.

  --freq     	Mostra a tabela de frequencias.

  --bits     	Mostra o mapa de bits para o 
             	alfabeto.

  --head     	Mostra o cabecalho do arquivo
             	apos comprimido.

  --help     	Mostra este texto de ajuda.

  --info     	Mostra informacoes do programa e 
             	encerra.

#+end_example

** Arquivo de teste

Os testes a seguir envolvem um arquivo-texto com as informações
abaixo. Este arquivo é populado com um texto /Lorem Ipsum/, texto sem
sentido automaticamente gerado em latim, normalmente utilizado para
testar elementos tipográficos em algum meio textual.

#+INCLUDE: ../lipsum1.txt src text

** Compressão

Exploraremos agora o processo de compressão do arquivo-texto
previamente informado. Cada um dos passos mais importantes da execução
possui uma representação visual, que pode ser obtida a partir de
argumentos específicos de console.

*** COMMENT Dump hexadecimal do arquivo-texto

#+begin_src bash :noweb strip-export :exports results :cache yes :results verbatim :eval no
<<setpath>>
hexdump -C lipsum1.txt
#+end_src

#+RESULTS[c94ae24781614a2380f6991d4580a8349257360d]:
#+begin_example
00000000  4c 6f 72 65 6d 20 69 70  73 75 6d 20 64 6f 6c 6f  |Lorem ipsum dolo|
00000010  72 20 73 69 74 20 20 61  6d 65 74 2c 20 63 6f 6e  |r sit  amet, con|
00000020  73 65 63 74 65 74 75 72  20 61 64 69 70 69 73 63  |sectetur adipisc|
00000030  69 6e 67 20 65 6c 69 74  2e 20 50 65 6c 6c 65 6e  |ing elit. Pellen|
00000040  74 65 73 71 75 65 0a 64  69 63 74 75 6d 20 65 6e  |tesque.dictum en|
00000050  69 6d 20 61 20 6d 65 74  75 73 20 75 6c 6c 61 6d  |im a metus ullam|
00000060  63 6f 72 70 65 72 2c 20  20 61 74 20 76 65 73 74  |corper,  at vest|
00000070  69 62 75 6c 75 6d 20 6e  75 6e 63 20 73 65 6d 70  |ibulum nunc semp|
00000080  65 72 2e 20 50 68 61 73  65 6c 6c 75 73 0a 6f 72  |er. Phasellus.or|
00000090  6e 61 72 65 20 65 72 6f  73 20 20 69 6d 70 65 72  |nare eros  imper|
000000a0  64 69 65 74 20 70 75 72  75 73 20 63 75 72 73 75  |diet purus cursu|
000000b0  73 20 20 61 63 63 75 6d  73 61 6e 2e 20 4e 75 6e  |s  accumsan. Nun|
000000c0  63 20 75 72 6e 61 20 20  6e 65 71 75 65 2c 20 70  |c urna  neque, p|
000000d0  6f 72 74 61 0a 61 63 2e  0a                       |orta.ac..|
000000d9
#+end_example

*** Mapa de frequências para o arquivo

O primeiro passo para a realização da compressão é criar o mapa de
frequências de caracteres. A aplicação é capaz de tomar um
arquivo-texto de entrada e exibir na tela apenas o mapa de
frequências, encerrando a aplicação em seguida.

#+begin_src bash :noweb strip-export :exports both :cache yes :results verbatim :eval no
<<setpath>>
./huffman lipsum1.txt --freq
#+end_src

Para a execução desta linha no console, teremos a saída:

#+RESULTS[0b1f615f28da982581beb11f23ea19ea279692e9]:
#+begin_example
 Char        |   Freq 
-------------+--------
        EOF  |      1
 0x0000000a  |      4
 0x00000020  |     31
          ,  |      3
          .  |      4
          L  |      1
          N  |      1
          P  |      2
          a  |     12
          b  |      1
(etc.)
#+end_example

*** Árvore do arquivo

Após a geração do mapa de frequências, geramos a árvore utilizando o
algoritmo de Huffman. A árvore gerada para este arquivo pode ser
acompanhada em forma de imagem, caso seja utilizado o argumento
=--image=, ou explorada dinamicamente, através do argumento
=--xdot=.

#+begin_src bash :noweb strip-export :exports both :cache yes :results silent :eval no
<<setpath>>
./huffman lipsum1.txt --xdot
#+end_src

Ambos estes métodos utilizam código especial gerado para
visualização da árvore, que pode ser exibido no console com o
argumento =--dot=.

A Figura [[fig:lipsum1_hufftree]] mostra a árvore gerada em questão, no
formato de imagem. Nós que apenas possuem uma frequência são
representados de forma arredondada, enquanto nós com um caractere
associado são representados como um retângulo com ambas as
informações armazenadas.

#+NAME: fig:lipsum1_hufftree
#+CAPTION: Exemplo de árvore de Huffman gerada para o texto /Lorem ipsum/.
#+ATTR_LATEX: :width \linewidth
[[file:../img/lipsum1_hufftree.png]]

*** Mapa de bits

Após a geração da árvore, podemos gerar o mapa de bits. O argumento
=--bits= demonstra os bits utilizados para cada um dos caracteres
do arquivo-texto.

#+begin_src bash :noweb strip-export :exports both :cache yes :results verbatim :eval no
<<setpath>>
./huffman lipsum1.txt --bits
#+end_src

Para a execução desta linha no console, teremos a saída:

#+RESULTS[4d72d5e6e7c91bc87940077904b54fffa6b493c3]:
#+begin_example
       EOF => 11011110
0x0000000a => 110100
0x00000020 => 101
         , => 1111110
         . => 110101
         L => 11011111
         N => 11111000
         P => 11111111
         a => 0110
         b => 11111001
(etc.)
#+end_example

*** Aplicação da compressão

Por fim, geramos um arquivo binário, onde é armazenada a relação de
bits por caractere no cabeçalho e, subsequentemente, os /bytes/ que
foram ocupados, sequencialmente, com os /bits/ de cada caractere.

O comando do console a seguir realiza todos os passos descritos
anteriormente, e também cria um arquivo que carrega a informação
compactada:

#+begin_src bash :noweb strip-export :exports code :cache yes :results silent :eval no
<<setpath>>
./huffman lipsum1.txt -o lipsum1.huffman
#+end_src

Podemos observar, numa representação hexadecimal do arquivo, que o
cabeçalho foi armazenado apropriadamente, uma vez que alguns
caracteres ficam aparentes logo no início do arquivo, como mostrado a
seguir (a representação textual de cada /byte/ encontra-se à direita).

#+begin_src bash :noweb strip-export :exports both :cache yes :results verbatim :eval no
<<setpath>>
hexdump -C lipsum1.huffman
#+end_src

Para a execução desta linha no console, teremos a saída:

#+RESULTS[1911993a50a74858ef91c7c7b50cc8bcc94f20d8]:
#+begin_example
00000000  48 55 46 46 4d 41 4e 00  1b 00 00 00 00 00 00 00  |HUFFMAN.........|
00000010  02 ff 08 00 00 00 00 01  00 00 00 de 0a 06 00 00  |................|
00000020  00 02 01 00 00 00 d0 20  03 00 00 00 05 01 00 00  |....... ........|
00000030  00 a0 2c 07 00 00 00 01  01 00 00 00 fc 2e 06 00  |..,.............|
00000040  00 00 02 01 00 00 00 d4  4c 08 00 00 00 00 01 00  |........L.......|
00000050  00 00 df 4e 08 00 00 00  00 01 00 00 00 f8 50 08  |...N..........P.|
00000060  00 00 00 00 01 00 00 00  ff 61 04 00 00 00 04 01  |.........a......|
00000070  00 00 00 60 62 08 00 00  00 00 01 00 00 00 f9 63  |...`b..........c|
00000080  04 00 00 00 04 01 00 00  00 20 64 06 00 00 00 02  |......... d.....|
00000090  01 00 00 00 d8 65 03 00  00 00 05 01 00 00 00 00  |.....e..........|
000000a0  67 08 00 00 00 00 01 00  00 00 fa 68 08 00 00 00  |g..........h....|
(etc.)
#+end_example

** Descompressão

Por último, demonstramos a descompressão do arquivo gerado. O processo
perpassa simplesmente informar o argumento =-x=, e fornecer o arquivo
comprimido como argumento.

*** Mapa de caracteres

O processo de descompressão envolve gerar, a partir do cabeçalho do
arquivo, o mapa de caracteres. Podemos visualizar este mapa através
do argumento =--bits=.

Este mapa é idêntico ao mapa de bits gerado anteriormente, todavia o
chaveamento é reverso, e portanto a ordem de impressão é afetada.

#+begin_src bash :noweb strip-export :exports both :cache yes :results verbatim :eval no
<<setpath>>
./huffman -x lipsum1.huffman --bits
#+end_src

Para a execução desta linha no console, teremos a saída:

#+RESULTS[100c2111ea2c96932b4a58385116743e2e46c6f1]:
#+begin_example
         e <= 000
         c <= 0010
         i <= 0011
         m <= 0100
         n <= 0101
         a <= 0110
         t <= 0111
         r <= 1000
         s <= 1001
0x00000020 <= 101
(etc.)
#+end_example

*** Recuperação do arquivo original

O último passo é a geração do arquivo-texto em si. O arquivo será
idêntico ao apresentado no início.

#+begin_src bash :noweb strip-export :exports code :cache yes :results silent :eval no
<<setpath>>
./huffman -x lipsum1.huffman -o saida.txt
#+end_src

* Conclusão

No curso de desenvolvimento deste trabalho, fizemos uma implementação
completa de um programa para compressão e descompressão de texto
plano, utilizando o algoritmo de Huffman. Demonstramos o algoritmo
através da utilização de pseudocódigo, e em seguida, demonstramos
partes relevantes da implementação em código. Por fim, mostramos,
passo-a-passo, a execução do programa em questão.

#+LATEX: \postextual

# <<bibliographystyle link>>
# bibliographystyle:unsrt

<<bibliography link>>
bibliography:../referencias.bib

* Footnotes

[fn:7] A implementação foi testada nos compiladores GNU C Compiler
(GCC) versão 9.2.0, e Clang versão 9.0.0, em um sistema operacional
baseado em Linux de 64 bits.

[fn:6] Utilizamos aqui o sentido de /streams/ vindo de sistemas Unix,
onde possuímos uma fonte de caracteres ou dados que pode ser lida ou
escrita. 

[fn:5] Aqui, temos o /vetor/ como uma estrutura alocada dinamicamente,
que possui acesso linear, e cujo tamanho é modificado de acordo com a
necessidade. 

[fn:4] /Lambdas/ ou /clausuras/ são funções capazes de serem tratadas e
repassadas como variáveis. Este é um conceito recorrente no tópico da
programação funcional, e aqui será utilizado para facilitar a
implementação do contêiner em questão.

[fn:3] Especificamente, =std::function<bool(huffman_node_t*, huffman_node_t*)>=.

[fn:2] ``Instead of imagining that our main task is to instruct a
computer what to do, let us concentrate rather on explaining
to human beings what we want a computer to do.'' 

[fn:1] Tradução adaptada do Inglês /"literate programming"/.
