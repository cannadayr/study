#+TITLE: Exercises: Theorem Proving in Lean
#+AUTHOR: Lucas S. Vieira
#+DATE: 2019
# #+PROPERTY: header-args:lean :tangle test.lean

:LATEX_FONT_CONFIG:
#+LATEX_HEADER: \usepackage{times}
#+LATEX_HEADER: \usepackage{ifxetex}

#+LATEX_HEADER: \ifxetex
#+LATEX_HEADER: \usepackage{mathspec}
#+LATEX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \usepackage{xunicode}
#+LATEX_HEADER: \setmonofont{FreeMono}
#+LATEX_HEADER: \usepackage{polyglossia}
#+LATEX_HEADER: \setmainlanguage{brazil}
#+LATEX_HEADER: \setotherlanguages{french,english,spanish,german,italian}  
#+LATEX_HEADER: \else
#+LATEX_HEADER: \usepackage[utf8x]{inputenc}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \linespread{1.05}
#+LATEX_HEADER: \usepackage[scaled]{helvet}
#+LATEX_HEADER: \usepackage{courier}
#+LATEX_HEADER: \fi
:END:

* Introduction

- [[https://leanprover.github.io/theorem_proving_in_lean/theorem_proving_in_lean.pdf][Link to PDF]]
- [[https://leanprover.github.io/theorem_proving_in_lean/][Link to Online Book]]

* Dependent Type Theory

Lean is based on a version of DTT called /Calculus of Constructions/.

** Simple Type Theory

Declaring objects on Lean and checking their types.

We can also use unicode, e.g. =\nat= is the same as =nat=, =\to= and =\r= is
the same as =->=, etc

#+INCLUDE: ch02-01.lean src lean

** Types as objects

Dependent type theory extends simple type theory as types are
first-class citizens, therefore they themselves are objects of study.

#+INCLUDE: ch02-02.lean src lean

** Function Abstraction and Evaluation

We create functions from other expressions by using /lambda
abstractions/.

#+INCLUDE: ch02-03.lean src lean

Some other examples for reduction.

#+INCLUDE: ch02-03-2.lean src lean

- Expressions which are equal despite the names of bound variables are
  /alpha equivalent/.
- Simplifying an expression by performing a substitution is a /beta
  reduction/.
- Terms that /beta reduce/ to the same thing are /beta equivalent/.
- Terms have a computational behaviour, supporting the notion of
  /reduction, which can also be understood as normalization/.
- Terms that reduce to /the same value/ are /definitionally equal/.

** Introducing definitions

Constants are a good way to postulate new objects to experiment with.

But most of the time we want to /define/ objects and /prove things/ about
them. So we use the =def= command.

#+INCLUDE: ch02-04.lean src lean

Exercises are at the end of the chapter.

** Local definitions

We can introduce "local" definitions by using =let=.

#+INCLUDE: ch02-05.lean src lean

** Variables and sections

We know that

- =constant= declares new objects as part of the global context. Like an
  axiom.
- =def= defines a mathematical object, as /declaring/ objects is somewhat
  lazy.

The =variable= and the =variables= command makes local declarations look
global.

#+INCLUDE: ch02-06.lean src lean

The use of these commands determine that the variable stays in scope
until the end of file. But we can limit the scope to a =section=.

#+INCLUDE: ch02-06-2.lean src lean

** Namespaces

We can group definitions using nested, hierarchical =namespaces=.

Namespaces cannot be declared within a section, as they have to live
on outer levels.

Namespaces organize data, and sections declare variables for insertion
in theorems. In many respects, namespaces work like sections:
variables within namespaces are limited to the namespace's scope.

#+INCLUDE: ch02-07.lean src lean

** Dependent types

The "dependent" in Dependent Type Theory relates to the fact that
types can depend on parameters.

For example, =list α= depends on argument =α=; this is what distinguishes
=list ℕ= from =list bool=.

Consider also =vec α n=, the type of vectors of elements of =α=, with
length =n=. This type depends on /two/ parameters:

- =α : Type=, for the type of the elements;
- =n : ℕ=, for the length of the vector.

Suppose the function =cons=; since we have lists of many types, =cons= has
to be polymorphic. Therefore, for every =α=, =cons α= is a function such
as =cons α (elt : α) (lst : list α) : list α=.

So the type of =cons α= should be =α → list α → list α=. But what is the
type of =cons=? If we assume =Type → α → list α → list α=, this does not
make sense since =α= does not refer to anything; it is not an argument
of type =Type=.

So we need a /Pi (=Π=) type/, or a /dependent function type/.

Given =α : Type= and =β : α → Type=, =β= is like a family of types over =α= --
in other words, there is a type =β a= for each =a : α=.

So the type =Π x : α, β x= denotes the types of functions =f= with the
property that, for each =a : α=, the application =f a= has a type =β a=.

So the type of the value returned by =f= depends on its input.

=Π x : α, β= makes sense for any =β : Type=. When the value of =β= depends
on =x= (like in =β x=), then =Π x : α, β= denotes a /dependent function
type/. When =β= does not depend on =x=, then =Π x : α, β= is the same as =α →
β=.

So =α → β= is just an alternative notation for =Π x : α, β= iff =β= does not
depend on =x=, as in dependent type theory the =Π= construction is
fundamental.

#+INCLUDE: ch02-08.lean src lean

There are also /Sigma (=Σ=) types/, also known as /dependent products/. They
are companions to /Pi types/;

The type =Σ x : α, β x= denotes the type of pairs =sigma.mk a b=, for all
=a : α= and =b : β a=.

Sigma types =Σ x : α, β x= generalize the cartesian product =α × β= just
like Pi types =Π x : α, β x= do for a function type =α → β=.

So in the expression =sigma.mk a b=, the type of the second element of
the pair, =b : β a=, depends on the first element of the pair, =a : α=.

#+INCLUDE: ch02-08-2.lean src lean

** Implicit arguments

Suppose the following implementation for lists.

#+INCLUDE: ch02-09.lean src lean

** Exercises

#+INCLUDE: ch02-exercises.lean src lean

